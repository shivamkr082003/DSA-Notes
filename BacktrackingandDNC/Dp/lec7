class Solution {
public:
    long long mod = 1000000007;
    // int solveUsingRec(int n, int k, int target){
    //     // base cases
    //     if(target < 0) return 0;
    //     if(n == 0 && target != 0) return 0;
    //     if(n == 0 && target == 0) return 1;

    //     /// calculation
    //     int ans = 0;
    //     for(int i = 1; i <= k; i++){
    //         ans = ans + solveUsingRec(n - 1, k, target - i);
    //     }
    //     return ans;
    // }

    int solveUsingMemo(int n, int k, int target, vector<vector<int>>& dp) {
        // base cases
        if (target < 0)
            return 0;
        if (n == 0 && target != 0)
            return 0;
        if (n == 0 && target == 0)
            return 1;
        if (dp[n][target] != -1)
            return dp[n][target];

        // calculation
        int ans = 0;
        for (int i = 1; i <= k; i++) {
            int recAns = 0;
            ans = (ans + solveUsingMemo(n - 1, k, target - i, dp)) % mod;
        }
        return dp[n][target] = ans; 
    }

    int numRollsToTarget(int n, int k, int target) {
        // return solveUsingRec(n, k, target);
        vector<vector<int>> dp(n + 1, vector<int>(target + 1, -1));
        return solveUsingMemo(n, k, target, dp);
    }
};